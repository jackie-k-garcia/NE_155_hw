import numpy as np
import matplotlib.pyplot as plt

a = 4 #values are in cm
D = 1
Sigma = 0.2 # 1/cm
S = 8 # n/(cm^3*s)
h = .01 #cm
L = (D/Sigma)**0.5

q = 8/h
b_array = np.zeros((q-2, 1))
i = 0
while i < q - 2:
    b_array[i][0] = 8
    i += 1

A = -D/(h ** 2)
B = D * (2 + (h**2)/(L**2))/(h**2)
C = -D/(h**2)

def matrix_a():
    a = []
    c = []
    i = 0
    while i < (8/h)-3:
        a.append(A)
        c.append(C)
        i += 1
    b = []
    i = 0
    while i < (8/h)-2:
        b.append(B)
        i += 1

    def tridiag(a, b, c, k1=-1, k2=0, k3=1):
        return np.diag(a, k1) + np.diag(b, k2) + np.diag(c, k3)
    M = tridiag(a, b, c)
    return M

Am = matrix_a()
#print(Am)

sol = np.dot(np.linalg.inv(Am), b_array)
#print(sol)

new_sol = []
new_sol.append(0)
for i in sol:
    new_sol.append(i)
new_sol.append(0)

x_axis = np.linspace(-4, 4, q)
phi_val = []
for i in x_axis:
    phi = (-8*np.exp(a*(Sigma/D)**0.5))/(Sigma*(np.exp(2*a*(Sigma/D)**0.5)+1))*(np.exp(i*(Sigma/D)**0.5)+np.exp(-i*(Sigma/D)**0.5)) + 8/Sigma
    phi_val.append(phi)


error = np.linalg.norm(np.asarray(new_sol)-np.asarray(phi_val))/np.linalg.norm(np.asarray(phi_val))
print(error)

plt.plot(x_axis, new_sol, '*')
plt.plot(x_axis, phi_val)
plt.xlabel('x')
plt.ylabel('phi(x)')
plt.legend(('numerical', 'analytical'))
plt.title('Mesh size = 0.01 cm')
plt.show()
