import numpy as np
import scipy.linalg
import matplotlib.pyplot as plt

def matrix_gen(n):

    a =[]
    i = 0
    while i < n - 1:
        a.append(-1)
        i+=1
        #Assigns value to lower diagonal and upper diagonal
    b =[]
    j = 0
    while j < n:
        b.append(3)
        j+=1

    def tridiag(a, b, c, k1=-1, k2=0, k3=1):
        return np.diag(a, k1) + np.diag(b, k2) + np.diag(c, k3)
        #A function that creates tridiagonal matrices

    A = tridiag(a, b, a)

    b_array = np.zeros((n, 1))
    num = np.linspace(0, n - 1, n)

    for i in num:
        b_array[i][0] = 100

    x_0 = np.zeros((n, 1))
    return A, b_array, x_0

def rel_error(x_k, x_k1):
    return np.linalg.norm(x_k1 - x_k) / np.linalg.norm(x_k1)

###

A, b_array, x_0 = matrix_gen(5)
D = np.diag(A)
p_j = np.diagflat(D) - A

def Jacobi_method(x):
    return np.dot(np.linalg.inv(np.diagflat(D)),np.dot(p_j, x)+b_array)

e = 1
i = 0
x = x_0

while e > 10 ** (-6):
    x_1 = Jacobi_method(x)
    e = rel_error(x, x_1)
    x = x_1
    i += 1

print("iterations required for error less than 10E-6 using Jacobi:")
print(i)
print("relative error:")
print(e)

e = 1
i = 0
x = x_0

while e > 10 ** (-8):
    x_1 = Jacobi_method(x)
    e = rel_error(x, x_1)
    x = x_1
    i += 1

print("iterations required for error less than 10E-8 using Jacobi:")
print(i)
print("relative error:")
print(e)

###

L = np.tril(A) #np.tril gives D+L
U = A - L #A = L+U

coef_1 = np.linalg.inv(L)
coef_2 = np.dot(coef_1, -U)
addition = np.dot(coef_1, b_array)
def Gauss_Seidel(x):
    return np.dot(coef_2, x) + addition

e = 1
i = 0
x = x_0

while e > 10 ** (-6):
    x_1 = Gauss_Seidel(x)
    e = rel_error(x, x_1)
    x = x_1
    i += 1

print("iterations required for error less than 10E-6 using Gauss Seidel:")
print(i)
print("relative error:")
print(e)

e = 1
i = 0
x = x_0

while e > 10 ** (-8):
    x_1 = Gauss_Seidel(x)
    e = rel_error(x, x_1)
    x = x_1
    i += 1

print("iterations required for error less than 10E-8 using Gauss Seidel:")
print(i)
print("relative error:")
print(e)

###

D = np.diagflat(D)
#The following function will use SOR Iteration
def SOR(x, w=1.15):
    L_prime = L - D
    coef1 = np.linalg.inv(D+(w*L_prime))
    coef2 = np.dot(coef1, (((1-w)*D) - (w*U)))
    addition = np.dot(coef1, w*b_array)
    return np.dot(coef2, x) + addition

e = 1
i = 0
x = x_0

while e > 10 ** (-6):
    x_1 = SOR(x)
    e = rel_error(x, x_1)
    x = x_1
    i += 1

print("iterations required for error less than 10E-6 using SOR")
print(i)
print("relative error:")
print(e)

e = 1
i = 0
x = x_0

while e > 10 ** (-8):
    x_1 = SOR(x)
    e = rel_error(x, x_1)
    x = x_1
    i += 1

print("iterations required for error less than 10E-8 using SOR:")
print(i)
print("relative error:")
print(e)
